name: Release

on:
  push:
<<<<<<< HEAD
    tags:
      - "v*"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Cleanup
        run: |
          echo "Before cleanup"
          df -h

          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /opt/hostedtoolcache/CodeQL
          sudo apt-get clean
          sudo apt-get autoremove -y
          sudo docker system prune -af

          echo "After cleanup"
          df -h

      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create binaries directory
        run: mkdir ./binaries

      - name: Build and Push
        uses: docker/bake-action@v6
        env:
          REGISTRY: ghcr.io
          REPOSITORY: ${{ github.repository }}
          GIT_COMMIT: ${{ github.sha }}
          GIT_VERSION: ${{ github.ref_name }}
          IMAGE_TAGS: ${{ github.ref_name }}
        with:
          files: docker-bake.hcl
          push: true
          set: |
            *.platform=linux/amd64,linux/arm64
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            binaries.output=type=local,dest=./binaries

      - name: Check version label
        run: 'binaries/linux_amd64/geth version | grep -q "Version: $(echo ${{ github.ref_name }} | cut -c 2-10)"'

      - name: Compress Binaries
        run: |
          (cd binaries/linux_amd64 && zip -q - geth) > geth-${{ github.ref_name }}-linux-amd64.zip 
          (cd binaries/linux_arm64 && zip -q - geth) > geth-${{ github.ref_name }}-linux-arm64.zip

      - name: Create genesis.zip
        run: zip -r genesis.zip genesis

      - name: Create setup.sh
        run: |
          sed -e 's#__REPOSITORY__#${{ github.repository }}#' .github/setup_template.sh | \
          sed -e 's#__RELEASE__#${{ github.ref_name }}#' > setup.sh

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: |
            geth-*.zip
            genesis.zip
            setup.sh
=======
    # Publish `v1.2.3` tags as releases.
    tags:
      - v*
env:
  CGO_CFLAGS: "-O -D__BLST_PORTABLE__"
  CGO_CFLAGS_ALLOW: "-O -D__BLST_PORTABLE__"

jobs:
  build:
    name: Build Release
    strategy:
      matrix:
        go-version: [1.23.x]
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go-version }}

      - uses: actions/cache@v3
        with:
          # In order:
          # * Module download cache
          # * Build cache (Linux)
          # * Build cache (Mac)
          # * Build cache (Windows)
          path: |
            ~/go/pkg/mod
            ~/.cache/go-build
            ~/Library/Caches/go-build
            ~\AppData\Local\go-build
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      # ==============================
      #       Linux/Macos/Windows Build
      # ==============================

      - name: Build Binary for ${{matrix.os}}
        if: matrix.os == 'ubuntu-latest'
        run: |
          go mod download
          wget https://musl.cc/x86_64-linux-musl-cross.tgz
          tar -xvf ./x86_64-linux-musl-cross.tgz
          GIT_COMMIT=$(git rev-parse HEAD)
          GIT_COMMIT_DATE=$(git log -n1 --pretty='format:%cd' --date=format:'%Y%m%d')
          GOOS=linux GOARCH=amd64 CGO_ENABLED=1 CC=$(pwd)/x86_64-linux-musl-cross/bin/x86_64-linux-musl-gcc go build -ldflags "-X main.gitCommit=$GIT_COMMIT -X main.gitDate=$GIT_COMMIT_DATE -extldflags=-static" -o ./build/bin/geth -a ./cmd/geth
      
      - name: Build Binary for ${{matrix.os}}
        if: matrix.os != 'ubuntu-latest'
        run: |
          go mod download
          make geth

      # ==============================
      #       Cross Compile for ARM
      # ==============================

      - name: Build Binary for ARM
        if: matrix.os == 'ubuntu-latest'
        run: |
          go mod download
          wget https://musl.cc/aarch64-linux-musl-cross.tgz
          tar -xvf ./aarch64-linux-musl-cross.tgz
          GIT_COMMIT=$(git rev-parse HEAD)
          GIT_COMMIT_DATE=$(git log -n1 --pretty='format:%cd' --date=format:'%Y%m%d')
          GOOS=linux GOARCH=arm64 CGO_ENABLED=1 CC=$(pwd)/aarch64-linux-musl-cross/bin/aarch64-linux-musl-gcc go build -ldflags "-X main.gitCommit=$GIT_COMMIT -X main.gitDate=$GIT_COMMIT_DATE -extldflags=-static" -o ./build/bin/geth-linux-arm64 -a ./cmd/geth

      # ==============================
      #       Upload artifacts
      # ==============================

      - name: Upload Linux Build
        uses: actions/upload-artifact@v4.3.3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: linux
          path: ./build/bin/geth

      - name: Upload MacOS Build
        uses: actions/upload-artifact@v4.3.3
        if: matrix.os == 'macos-latest'
        with:
          name: macos
          path: ./build/bin/geth
      
      - name: Upload Windows Build
        uses: actions/upload-artifact@v4.3.3
        if: matrix.os == 'windows-latest'
        with:
          name: windows
          path: ./build/bin/geth.exe

      - name: Upload ARM-64 Build
        uses: actions/upload-artifact@v4.3.3
        if: matrix.os == 'ubuntu-latest'
        with:
          name: arm64
          path: ./build/bin/geth-linux-arm64
>>>>>>> 294c7321ab439545b2ab1bb7eea74a44d83e94a1

  release:
    name: Release
    needs: build
    runs-on: ubuntu-latest
    steps:
<<<<<<< HEAD
      - name: Download Artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ github.ref_name }}
          path: artifacts

      - name: Create sha256sums.txt
        run: (cd artifacts && sha256sum *) > sha256sums.txt

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: true
          files: |
            artifacts/*
            sha256sums.txt
=======
      - name: Set Env
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV

      - name: Checkout Code
        uses: actions/checkout@v3

      # ==============================
      #       Download artifacts
      # ==============================

      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: linux
          path: ./linux
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: macos
          path: ./macos
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: windows
          path: ./windows
      
      - name: Download Artifacts
        uses: actions/download-artifact@v4.1.7
        with:
          name: arm64
          path: ./arm64
      
      - name: Download Config File
        run: |
          . ./.github/release.env
          echo "mainnet.zip url: $MAINNET_FILE_URL"
          echo "testnet.zip url: $TESTNET_FILE_URL"
          curl -L $MAINNET_FILE_URL -o ./mainnet.zip
          curl -L $TESTNET_FILE_URL -o ./testnet.zip
      # ==============================
      #       Create release
      # ==============================
      - name: Generate Change Log
        id: changelog
        run: |
          chmod 755 ./.github/generate_change_log.sh
          CHANGELOG=$(./.github/generate_change_log.sh ${{ env.RELEASE_VERSION}})
          echo "CHANGELOG<<EOF" >> $GITHUB_ENV
          echo "$CHANGELOG" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Rename assets
      - run: |
          mv ./linux/geth ./linux/geth_linux
          mv ./macos/geth ./macos/geth_macos
          mv ./windows/geth.exe ./windows/geth_windows.exe

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.RELEASE_VERSION}}
          release_name: ${{ env.RELEASE_VERSION}}
          body: |
            ${{ env.CHANGELOG }}
          draft: false
          prerelease: false
          files: |
            ./mainnet.zip
            ./testnet.zip
            ./linux/geth_linux
            ./macos/geth_macos
            ./windows/geth_windows.exe
            ./arm64/geth-linux-arm64
>>>>>>> 294c7321ab439545b2ab1bb7eea74a44d83e94a1
